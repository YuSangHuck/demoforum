pipeline {
    agent any
    tools {
//        terraform 'terraform'
        gradle 'gradle'
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION = credentials('AWS_REGION')
    }
    options {
        parallelsAlwaysFailFast()
    }
    stages {
        stage('test') {
            parallel {
                stage('unit test') {
                    steps {
                        sh('echo "unit test"')
                    }
                }
                stage('integration test') {
                    steps {
                        sh('echo "integration test"')
                    }
                }
                stage('e2e test') {
                    steps {
                        sh('echo "e2e test"')
                    }
                }
            }
        }
        stage('build') {
            steps {
                sh 'echo buildZip with gradle'
                sh 'gradle clean buildZip'
            }
        }
        stage('deploy') {
            when {
                branch 'master'
            }
            options{
                skipDefaultCheckout()
            }
            environment{
                PATH = "/var/jenkins_home/_lib/node-v16.17.0-linux-x64/bin:${env.PATH}"
            }
            steps {
                sh 'echo deploy with serverless'
                sh 'serverless deploy'
            }
        }
    }
    post {
        always {
            echo currentBuild.currentResult
            setBuildStatus()
        }
    }
}


// currentBuild.result 기반 commit status 생성
void setBuildStatus() {
    def backref = createBackref()

    step([
            $class             : "GitHubCommitStatusSetter",
            reposSource        : [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/YuSangHuck/demoforum"],
            contextSource      : [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
            errorHandlers      : [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
            statusResultSource : [
                    $class : 'ConditionalStatusResultSource',
                    results: [
                            [$class: 'BetterThanOrEqualBuildResult', result: 'SUCCESS', state: 'SUCCESS', message: 'success'],
                            [$class: 'BetterThanOrEqualBuildResult', result: 'FAILURE', state: 'FAILURE', message: 'failure'],
                            [$class: 'AnyBuildResult', state: 'FAILURE', message: 'Loophole']
                    ]
            ],
            statusBackrefSource: [$class: "ManuallyEnteredBackrefSource", backref: backref]
    ])
}

String createBackref() {
    String PUBLIC_JENKINS = 'http://svsrrmnzb2ckyh4576v4saelh1xrdq49.iptime.org:10101'
    def host = new URI(PUBLIC_JENKINS).getHost()
    String RUN_DISPLAY_URL = "${env.RUN_DISPLAY_URL}"
    def publcJenkisUri = new URI(RUN_DISPLAY_URL)
//    def authority = publcJenkisUri.getAuthority() // localhost:10101
    def fragment = publcJenkisUri.getFragment() // null
//    def host = publcJenkisUri.getHost() // localhost
    def path = publcJenkisUri.getPath() // /job/demoforum/job/feature%2Fcicd/25/display/redirect
    def port = publcJenkisUri.getPort() // 10101
    def query = publcJenkisUri.getQuery() // null
    def scheme = publcJenkisUri.getScheme() // http
    def userInfo = publcJenkisUri.getUserInfo() // null

    return new URI(scheme, userInfo, host, port, path, query, fragment).toString()
}
